# Translations template for PROJECT.
# Copyright (C) 2024 ORGANIZATION
# This file is distributed under the same license as the PROJECT project.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PROJECT VERSION\n"
"Report-Msgid-Bugs-To: EMAIL@ADDRESS\n"
"POT-Creation-Date: 2024-12-20 16:26+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.16.0\n"

#: ../../community/setup.md:1
msgid "Get started with development"
msgstr "开始开发之旅"

#: ../../community/setup.md:3
msgid ""
"This section covers the simplest way to get started developing this theme"
" locally so that you can contribute. It uses automation and as few steps "
"as possible to get things done."
msgstr ""
"本节介绍了开始本地开发此主题的最简单方法，以便您可以做出贡献。它使用自动化并以尽可能少的步骤完成任务。"

#: ../../community/setup.md:6
msgid ""
"If you are comfortable with and prefer a more manual setup refer to the "
"[](topics/manual-dev.md) section."
msgstr ""
"如果您熟悉并更喜欢更手动的设置，请参阅 [](topics/manual-dev.md) 部分。"

#: ../../community/setup.md:8
msgid "Testing pre-release and nightly"
msgstr "测试预发布版和 nightly 版本"

#: ../../community/setup.md:10
msgid ""
"You can test the alpha, beta and release candidates of the PyData Sphinx "
"theme on your projects. To do so install with pip using the `--pre` flag:"
msgstr ""

#: ../../community/setup.md:17
msgid "If an `alpha`, `beta` or `rc` is available, pip will install it."
msgstr ""

#: ../../community/setup.md:19
msgid ""
"You can use the `--pre` flag in your project's continuous integration "
"test suite to catch regressions or bugs before their release."
msgstr ""

#: ../../community/setup.md:22
msgid ""
"If you are even more adventurous `pydata-sphinx-theme` has nightly "
"builds, you can try following the instructions provided [on the "
"scientific-python/upload-nightly-action README](https://github.com"
"/scientific-python/upload-nightly-action?tab=readme-ov-file#using-"
"nightly-builds-in-ci) on installing nightly wheels."
msgstr ""

#: ../../community/setup.md:27
msgid ""
"Installing nightly wheels in your project's CI jobs is a great way to "
"help theme developers catch bugs ahead of time."
msgstr ""

#: ../../community/setup.md:30
msgid "Workflow for contributing changes"
msgstr ""

#: ../../community/setup.md:32
msgid ""
"We follow a [typical GitHub "
"workflow](https://guides.github.com/introduction/flow/) of:"
msgstr ""

#: ../../community/setup.md:35
msgid "create a personal fork and local clone of this repo"
msgstr ""

#: ../../community/setup.md:36
msgid "create a branch for your contribution"
msgstr ""

#: ../../community/setup.md:37
msgid "open a pull request"
msgstr ""

#: ../../community/setup.md:38
msgid "fix findings of various linters and checks"
msgstr ""

#: ../../community/setup.md:39
msgid "work through code review"
msgstr ""

#: ../../community/setup.md:41
msgid ""
"For each pull request (PR), the documentation is built and deployed to "
"make it easier to review the changes in the PR. To access this preview, "
"click on the {{ rtd }} preview in the CI/CD jobs (GitHub checks section "
"at the bottom of a PR, note you might need to click on \"Show all "
"checks\" to access the job)."
msgstr ""

#: ../../community/setup.md:45
msgid "The sections below cover the contribution steps in more detail."
msgstr ""

#: ../../community/setup.md:47
msgid "Clone the repository"
msgstr ""

#: ../../community/setup.md:49
msgid ""
"First off you'll need your copy of the `pydata-sphinx-theme` codebase. "
"You can clone it for local development like so:"
msgstr ""

#: ../../community/setup.md:52
msgid ""
"**Fork the repository**, so you have your own copy on GitHub. See [the "
"GitHub forking guide](https://docs.github.com/en/get-"
"started/quickstart/fork-a-repo) for more information."
msgstr ""

#: ../../community/setup.md:54
msgid ""
"**Clone the repository locally** so that you have a local copy to work "
"from:"
msgstr ""

#: ../../community/setup.md:61
msgid "Install your tools"
msgstr ""

#: ../../community/setup.md:63
msgid ""
"Building a Sphinx site uses a combination of Python and `Jinja` to manage"
" `HTML`, `scss`, and `JavaScript`. To simplify this process, we use a few"
" helper tools:"
msgstr ""

#: ../../community/setup.md:66
msgid ""
"[The Sphinx Theme Builder](https://sphinx-theme-"
"builder.readthedocs.io/en/latest/) compiles web assets in an automated "
"way."
msgstr ""

#: ../../community/setup.md:67
msgid ""
"[pre-commit](https://pre-commit.com/) for automatically enforcing code "
"standards and quality checks before commits."
msgstr ""

#: ../../community/setup.md:68
msgid ""
"[tox](https://tox.wiki/en/latest/index.html) for automating common "
"development tasks."
msgstr ""

#: ../../community/setup.md:69
msgid "[pandoc](https://pandoc.org/) the universal document converter."
msgstr ""

#: ../../community/setup.md:71
msgid ""
"In particular, `tox` can be used to automatically create isolated local "
"development environments with all the correct packages installed to work "
"on the theme. The rest of this guide focuses on using `tox` to start with"
" a basic environment."
msgstr ""

#: ../../community/setup.md:75
msgid ""
"The information on this page covers the basics to get you started, for "
"information about manually compiling assets, see [](topics/manual-"
"dev.md)."
msgstr ""

#: ../../community/setup.md:78
msgid "Setup `tox`"
msgstr ""

#: ../../community/setup.md:80
msgid "To start, install `tox`:"
msgstr ""

#: ../../community/setup.md:86
msgid ""
"You can call `tox` from the command line to perform common actions that "
"are needed in building the theme. `tox` operates with isolated "
"environments, so each action has its packages installed in a local "
"directory (`.tox`). For common development actions, you'll only need to "
"use `tox` and won't need to set up any other packages."
msgstr ""

#: ../../community/setup.md:90
msgid "Setup `pre-commit`"
msgstr ""

#: ../../community/setup.md:92
msgid ""
"`pre-commit` allows us to run several checks on the codebase every time a"
" new Git commit is made. This ensures standards and basic quality control"
" for our code."
msgstr ""

#: ../../community/setup.md:95
msgid "Install `pre-commit` with the following command:"
msgstr ""

#: ../../community/setup.md:101
msgid "then navigate to this repository's folder and activate it like so:"
msgstr ""

#: ../../community/setup.md:107
msgid ""
"This will install the necessary dependencies to run `pre-commit` every "
"time you make a commit with Git."
msgstr ""

#: ../../community/setup.md:110
msgid ""
"Your `pre-commit` dependencies will be installed in the environment from "
"which you're calling `pre-commit`, `tox`, etc. They will not be installed"
" in the isolated environments used by `tox`."
msgstr ""

#: ../../community/setup.md:114
msgid ""
"Alternatively, if you do not want to install pre-commit and its "
"dependencies globally, you can use `tox` to run the checks:"
msgstr ""

#: ../../community/setup.md:120
msgid ""
"The caveat to using `tox` is that this will not install the required "
"hooks to run the checks automatically before each commit, so you need to "
"run this manually."
msgstr ""

#: ../../community/setup.md:122
msgid "Build the documentation"
msgstr ""

#: ../../community/setup.md:124
msgid ""
"Now that you have `tox` installed and cloned the repository, you will "
"need to install Graphviz to build the documentation. To install Graphviz,"
" follow the instructions in the [Graphviz documentation for your "
"operating system](https://graphviz.org/download/)."
msgstr ""

#: ../../community/setup.md:127
msgid ""
"Once you have `tox` and Graphviz installed, you can build the "
"documentation. To build the documentation with `tox`, run the following "
"command:"
msgstr ""

#: ../../community/setup.md:134
msgid ""
"This will install the necessary dependencies and build the documentation "
"located in the `docs/` folder. The generated documentation will be placed"
" in a `docs/_build/html` folder. If the docs have already been built, it "
"will only rebuild the pages that have been updated. You can open one of "
"the HTML files there to preview the documentation locally."
msgstr ""

#: ../../community/setup.md:139
msgid ""
"Alternatively, you can invoke the built-in Python "
"[http.server](https://docs.python.org/3/library/http.server.html#module-"
"http.server) with:"
msgstr ""

#: ../../community/setup.md:145
msgid ""
"This will print a local URL that you can open in a browser to explore the"
" HTML files."
msgstr ""

#: ../../community/setup.md:147
msgid ""
"You can also serve the documentation with live-reload using the following"
" command:"
msgstr ""

#: ../../community/setup.md:153
msgid ""
"This command will build the documentation and watch for any changes to "
"the `doc` folder and rebuild the documentation automatically."
msgstr ""

#: ../../community/setup.md:155
msgid "Change content and re-build"
msgstr ""

#: ../../community/setup.md:157
msgid ""
"Now that you've built the documentation, edit one of the source files to "
"see how the documentation updates with new builds."
msgstr ""

#: ../../community/setup.md:159
msgid ""
"**Make an edit to a page**. For example, add a word or fix a typo on any "
"page."
msgstr ""

#: ../../community/setup.md:160
msgid "**Rebuild the documentation** with `tox run -e docs-dev`"
msgstr ""

#: ../../community/setup.md:162
msgid ""
"It should go much faster this time because `tox` is re-using the "
"previously created environment, and because Sphinx has cached the pages "
"that you didn't change."
msgstr ""

#: ../../community/setup.md:164
msgid "Compile the CSS/JS assets"
msgstr ""

#: ../../community/setup.md:166
msgid ""
"The source files for CSS and JS assets are in "
"`src/pydata_sphinx_theme/assets`. These are then built and bundled with "
"the theme (e.g., `scss` is turned into `css`)."
msgstr ""

#: ../../community/setup.md:169
msgid "To compile the CSS/JS assets with `tox`, run the following command:"
msgstr ""

#: ../../community/setup.md:175
msgid ""
"This will compile all assets and place them in the appropriate folder to "
"be used with documentation builds."
msgstr ""

#: ../../community/setup.md:178
msgid ""
"Compiled assets are **not committed to git**. The `sphinx-theme-builder` "
"will bundle these assets automatically when we make a new release, but we"
" do not manually commit these compiled assets to Git history."
msgstr ""

#: ../../community/setup.md:182
msgid "Run a development server"
msgstr ""

#: ../../community/setup.md:184
msgid ""
"You can combine the above two actions (build the docs and compile JS/CSS "
"assets) and run a development server so that changes to `src/` are "
"automatically bundled with the package, and the documentation is "
"immediately reloaded in a live preview window."
msgstr ""

#: ../../community/setup.md:187
msgid "To run the development server with `tox`, run the following command:"
msgstr ""

#: ../../community/setup.md:194
msgid "When working on the theme, making changes to any of these directories:"
msgstr ""

#: ../../community/setup.md:196
msgid "`src/js/index.js`"
msgstr ""

#: ../../community/setup.md:197
msgid "`src/scss/index.scss`"
msgstr ""

#: ../../community/setup.md:198
msgid "`docs/**/*.rst`"
msgstr ""

#: ../../community/setup.md:199
msgid "`docs/**/*.md`"
msgstr ""

#: ../../community/setup.md:200
msgid "`docs/**/*.py`"
msgstr ""

#: ../../community/setup.md:202
msgid "will cause the development server to do the following:"
msgstr ""

#: ../../community/setup.md:204
msgid "bundle/copy the CSS, JS, and vendored fonts"
msgstr ""

#: ../../community/setup.md:205
msgid "regenerate the Jinja2 macros"
msgstr ""

#: ../../community/setup.md:206
msgid "re-run Sphinx"
msgstr ""

#: ../../community/setup.md:208
msgid "Run the tests"
msgstr ""

#: ../../community/setup.md:210
msgid ""
"This theme uses `pytest` and `playwright` for testing. There is a "
"lightweight fixture defined in the `test_build.py` script that makes it "
"straightforward to run a Sphinx build using this theme and inspect the "
"results. There are also several automated accessibility checks in "
"`test_a11y.py`."
msgstr ""

#: ../../community/setup.md:216
msgid ""
"Currently, the automated accessibility tests check the Kitchen Sink page "
"only. We are working on extending coverage to the rest of the theme."
msgstr ""

#: ../../community/setup.md:220
msgid ""
"In addition, we use [pytest-regressions](https://pytest-"
"regressions.readthedocs.io/en/latest/) to ensure that the HTML generated "
"by the theme is what we'd expect. This module provides a "
"`file_regression` fixture that will check the contents of an object "
"against a reference file on disk. If the structure of the two differs, "
"then the test will fail. If we _expect_ the structure to differ, then "
"delete the file on disk and run the test. A new file will be created, and"
" subsequent tests will pass."
msgstr ""

#: ../../community/setup.md:229
msgid "To run the build tests with `tox`, run the following command:"
msgstr ""

#: ../../community/setup.md:240
msgid "To run the accessibility checks:"
msgstr ""

#: ../../community/setup.md:250
msgid "GitHub Codespaces"
msgstr ""

#: ../../community/setup.md:252
msgid ""
"If you have good internet connectivity and want a temporary set-up, it is"
" often faster to work on the PyData Sphinx Theme in a Codespaces "
"environment. Once your Codespaces instance is set up, you can run the "
"`tox` commands above to build the documentation, compile the assets, and "
"run the tests. For documentation on how to get started with Codespaces, "
"see [the Codespaces "
"documentation](https://docs.github.com/en/codespaces)."
msgstr ""

