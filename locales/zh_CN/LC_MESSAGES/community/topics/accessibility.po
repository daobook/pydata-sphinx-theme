# Translations template for PROJECT.
# Copyright (C) 2024 ORGANIZATION
# This file is distributed under the same license as the PROJECT project.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PROJECT VERSION\n"
"Report-Msgid-Bugs-To: EMAIL@ADDRESS\n"
"POT-Creation-Date: 2024-12-20 16:26+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.16.0\n"

#: ../../community/topics/accessibility.md:1
msgid "Accessibility checks and manual auditing"
msgstr ""

#: ../../community/topics/accessibility.md:3
msgid ""
"As part of our commitment to making this theme accessible, we run "
"automated checks against all the pages under [](../../examples/kitchen-"
"sink/index.rst)."
msgstr ""

#: ../../community/topics/accessibility.md:6
msgid ""
"The accessibility check is run every time that a pull request is created "
"on GitHub. We forbid merging a pull request into the codebase if it "
"breaks this check."
msgstr ""

#: ../../community/topics/accessibility.md:10
msgid "Running the checks locally"
msgstr ""

#: ../../community/topics/accessibility.md:12
msgid ""
"If you are [developing the theme locally](../setup.md), the simplest way "
"to run the accessibility checks on your computer is:"
msgstr ""

#: ../../community/topics/accessibility.md:19
msgid "Technical details"
msgstr ""

#: ../../community/topics/accessibility.md:21
msgid ""
"The main two technologies we use to write and run accessibility checks "
"are [Playwright for Python](https://playwright.dev/python/) and [axe-"
"core](https://github.com/dequelabs/axe-core)."
msgstr ""

#: ../../community/topics/accessibility.md:25
msgid ""
"Playwright is the successor to a similar library called Puppeteer. It "
"provides a way to programmatically script a web browser to open, operate,"
" inspect, and test web pages. Axe-core is a suite of accessibility checks"
" written as a JavaScript program. The program is meant to be injected "
"into a web page. Once injected, it examines the page for common "
"accessibility failures, such as low contrast text. Our accessibility test"
" suite uses Playwright to inject Axe-core into each of the Kitchen Sink "
"pages plus a few other key pages in this documentation. We also wrote a "
"few other Playwright scripts to ensure that certain theme components can "
"be accessed using only the keyboard. All of our tests currently live in a"
" file called [test_a11y.py](https://github.com/pydata/pydata-sphinx-"
"theme/blob/main/tests/test_a11y.py)."
msgstr ""

#: ../../community/topics/accessibility.md:37
msgid ""
"We would love contributions that add more accessibility checks to our "
"test suite."
msgstr ""
"“非常欢迎为测试套件添加更多可访问性检查的贡献。"

#: ../../community/topics/accessibility.md:41
msgid ""
"We have also made these tests part of our continuous integration process,"
" so they are run in the cloud before we merge in new changes to the "
"theme. We use the following tools:"
msgstr ""
"还将这些测试作为持续集成流程的一部分，因此在将新更改合并到主题之前，它们会在云端运行。使用以下工具："

#: ../../community/topics/accessibility.md:45
msgid "GitHub Actions to provision machines in the cloud"
msgstr "GitHub Actions 用于在云端配置机器"

#: ../../community/topics/accessibility.md:46
msgid "`tox` to install the needed dependencies on those machines"
msgstr "`tox`用于在这些机器上安装所需的依赖项"

#: ../../community/topics/accessibility.md:47
msgid "`Pytest` with the Playwright plug-in to run the tests."
msgstr "`Pytest` 与Playwright插件一起运行测试。"

#: ../../community/topics/accessibility.md:49
msgid ""
"Look for the string \"accessibility\" in the file "
"[CI.yml](https://github.com/pydata/pydata-sphinx-"
"theme/blob/main/.github/workflows/CI.yml) to find how we have configured "
"GitHub Actions."
msgstr ""

#: ../../community/topics/accessibility.md:53
msgid "Known limitations and manual auditing"
msgstr ""

#: ../../community/topics/accessibility.md:55
msgid ""
"We are well aware that automated checks fall far short of comprehensive "
"accessibility auditing and testing, so we also conducted an accessibility"
" audit of three pages from the theme docs. We collected those findings in"
" an issue on GitHub, [May 2024 PyData Theme audit "
"findings](https://github.com/Quansight-Labs/czi-scientific-python-"
"mgmt/issues/72)"
msgstr ""

#: ../../community/topics/accessibility.md:61
msgid ""
"Nearly all of the issues have been fixed, but of course things do break /"
" have already broken, and some things may have never been discovered, so "
"please [create a GitHub issue](https://github.com/pydata/pydata-sphinx-"
"theme/issues/new) if you find something inaccessible."
msgstr ""

