# Translations template for PROJECT.
# Copyright (C) 2024 ORGANIZATION
# This file is distributed under the same license as the PROJECT project.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PROJECT VERSION\n"
"Report-Msgid-Bugs-To: EMAIL@ADDRESS\n"
"POT-Creation-Date: 2024-12-20 16:26+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.16.0\n"

#: ../../community/topics/accessibility.md:1
msgid "Accessibility checks and manual auditing"
msgstr "无障碍检查与手动审核"

#: ../../community/topics/accessibility.md:3
msgid ""
"As part of our commitment to making this theme accessible, we run "
"automated checks against all the pages under [](../../examples/kitchen-"
"sink/index.rst)."
msgstr ""
"作为我们致力于使该主题具备无障碍访问性的承诺的一部分，我们对 [](../../examples/kitchen-sink/index.rst) 下的所有页面运行了自动化检查。"

#: ../../community/topics/accessibility.md:6
msgid ""
"The accessibility check is run every time that a pull request is created "
"on GitHub. We forbid merging a pull request into the codebase if it "
"breaks this check."
msgstr ""
"每次在 GitHub 上创建拉取请求时，都会运行无障碍检查。如果拉取请求未通过此检查，我们将禁止将其合并到代码库中。"

#: ../../community/topics/accessibility.md:10
msgid "Running the checks locally"
msgstr "在本地运行检查"

#: ../../community/topics/accessibility.md:12
msgid ""
"If you are [developing the theme locally](../setup.md), the simplest way "
"to run the accessibility checks on your computer is:"
msgstr ""
"如果您正在[本地开发主题](../setup.md)，在您的计算机上运行无障碍检查的最简单方法是："

#: ../../community/topics/accessibility.md:19
msgid "Technical details"
msgstr "技术细节"

#: ../../community/topics/accessibility.md:21
msgid ""
"The main two technologies we use to write and run accessibility checks "
"are [Playwright for Python](https://playwright.dev/python/) and [axe-"
"core](https://github.com/dequelabs/axe-core)."
msgstr ""
"用于编写和运行无障碍检查的两种主要技术是 [Playwright for Python](https://playwright.dev/python/) 和 [axe-core](https://github.com/dequelabs/axe-core)。"

#: ../../community/topics/accessibility.md:25
msgid ""
"Playwright is the successor to a similar library called Puppeteer. It "
"provides a way to programmatically script a web browser to open, operate,"
" inspect, and test web pages. Axe-core is a suite of accessibility checks"
" written as a JavaScript program. The program is meant to be injected "
"into a web page. Once injected, it examines the page for common "
"accessibility failures, such as low contrast text. Our accessibility test"
" suite uses Playwright to inject Axe-core into each of the Kitchen Sink "
"pages plus a few other key pages in this documentation. We also wrote a "
"few other Playwright scripts to ensure that certain theme components can "
"be accessed using only the keyboard. All of our tests currently live in a"
" file called [test_a11y.py](https://github.com/pydata/pydata-sphinx-"
"theme/blob/main/tests/test_a11y.py)."
msgstr ""
"Playwright 是类似库 Puppeteer 的继任者。它提供了一种以编程方式控制网页浏览器打开、操作、检查和测试网页的方法。Axe-core 是一套以 JavaScript 程序编写的无障碍检查工具。"
"该程序旨在注入到网页中。一旦注入，它会检查页面是否存在常见的无障碍问题，例如低对比度文本。"
"无障碍测试套件使用 Playwright 将 Axe-core 注入到 Kitchen Sink 页面以及本文档中的其他几个关键页面中。"
"还编写了一些其他 Playwright 脚本来确保某些主题组件可以仅通过键盘访问。"
"所有的测试目前都存放在名为 [test_a11y.py](https://github.com/pydata/pydata-sphinx-theme/blob/main/tests/test_a11y.py) 的文件中。"

#: ../../community/topics/accessibility.md:37
msgid ""
"We would love contributions that add more accessibility checks to our "
"test suite."
msgstr ""
"“非常欢迎为测试套件添加更多可访问性检查的贡献。"

#: ../../community/topics/accessibility.md:41
msgid ""
"We have also made these tests part of our continuous integration process,"
" so they are run in the cloud before we merge in new changes to the "
"theme. We use the following tools:"
msgstr ""
"还将这些测试作为持续集成流程的一部分，因此在将新更改合并到主题之前，它们会在云端运行。使用以下工具："

#: ../../community/topics/accessibility.md:45
msgid "GitHub Actions to provision machines in the cloud"
msgstr "GitHub Actions 用于在云端配置机器"

#: ../../community/topics/accessibility.md:46
msgid "`tox` to install the needed dependencies on those machines"
msgstr "`tox` 用于在这些机器上安装所需的依赖项"

#: ../../community/topics/accessibility.md:47
msgid "`Pytest` with the Playwright plug-in to run the tests."
msgstr "`Pytest` 与 Playwright 插件一起运行测试。"

#: ../../community/topics/accessibility.md:49
msgid ""
"Look for the string \"accessibility\" in the file "
"[CI.yml](https://github.com/pydata/pydata-sphinx-"
"theme/blob/main/.github/workflows/CI.yml) to find how we have configured "
"GitHub Actions."
msgstr ""
"在文件 [CI.yml](https://github.com/pydata/pydata-sphinx-theme/blob/main/.github/workflows/CI.yml) 中搜索字符串 \"accessibility\"，以了解我们如何配置 GitHub Actions。"

#: ../../community/topics/accessibility.md:53
msgid "Known limitations and manual auditing"
msgstr "已知限制与手动审核"

#: ../../community/topics/accessibility.md:55
msgid ""
"We are well aware that automated checks fall far short of comprehensive "
"accessibility auditing and testing, so we also conducted an accessibility"
" audit of three pages from the theme docs. We collected those findings in"
" an issue on GitHub, [May 2024 PyData Theme audit "
"findings](https://github.com/Quansight-Labs/czi-scientific-python-"
"mgmt/issues/72)"
msgstr ""
"深知自动化检查远不能替代全面的无障碍审核和测试，因此还对主题文档中的三个页面进行了无障碍审核。"
"将这些发现汇总在 GitHub 上的一个议题中，[2024 年 5 月 PyData 主题审核结果](https://github.com/Quansight-Labs/czi-scientific-python-mgmt/issues/72)。"

#: ../../community/topics/accessibility.md:61
msgid ""
"Nearly all of the issues have been fixed, but of course things do break /"
" have already broken, and some things may have never been discovered, so "
"please [create a GitHub issue](https://github.com/pydata/pydata-sphinx-"
"theme/issues/new) if you find something inaccessible."
msgstr ""
"几乎所有问题都已修复，但当然，某些内容可能会出现问题 / 已经出现问题，并且有些问题可能从未被发现，"
"因此如果您发现任何无法访问的内容，请[创建 GitHub 议题](https://github.com/pydata/pydata-sphinx-theme/issues/new)。"
